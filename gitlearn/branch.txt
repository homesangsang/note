分支管理

1.创建与合并分支
（1）创建dev分支，然后切换到devf分支：
	$git checkout -b dev 
	git checkout命令加上-b参数表示创建并切换，相当于一下两条命令
		$git branch dev
		$git checkout dev
	然后用git branch查看当前分支，命令会列出所有分支，当前分支会加上×号
（2）修改完文件之后就可以用git checkout master切换会master分支
	$git checkout master
（3）将master分支的工作合并到master分支上：
	$git merge dev		//合并制定分支到当前分支上，
（4）删除分支
	$git branch -d dev


另注：因为创建，合并和删除分支非常快，所以git鼓励你使用废纸完成某个任务，合并后在删掉分支和直接在master分支上工作效果是一样的，但是更安全;另外，回忆在前面学习的内容，在工作区用git checkout,在暂存区用git reset,所以在这里将创建文件，创建分支，修改文件等都是在工作区的操作，所以用checkout

使用到的命令
git branch
git branch <branchname>
git checkout <branchname>
git checkout -b <branchname>
git merge <branchname>
git branch -d <branchname>


2.解决冲突
当分支和master位于同一位置的修改冲突的时候，通常不能由系统修改提交，所以只能通过修改一个master分支，然后删除另外一个分支，具体模拟过程如下
git checkout -b feature1	//创建一个分支feature1
//修改一个文件
git add filename.txt		//提交在feature1下的修改
git commit -m "under feature1"
git checkout master		//切换到master分支
//修改同一个文件
git add filename.txt		//提交在master下的修改
git commit -m "under master"
git merge feature 		//将feature1合并到master
//这时候会提示报错，CONFLICT(content)Merge conflict in filename.txt\nAutomatic merge failed;fix conflicts and then commit the result.此时必须手动修改解决冲突然后提交
//修改内容
git add filename.txt
git commit -m "conflict fixed"
git log --grep --pretty=online --abbrev-commit	//查看修改的简略形式
git branch -d feature1		//删除feature分支


总结：当git无法完成自动合并分支时，就必须首先解决冲突。解决冲突后，在提交，合并完成
git log --graph --pretty=online --abbrev-commit 可以看到分支图





bug分支
情景：当前有一个未完成的项目代码，但是有bug需要修复
解决：将现有代码用git stash存放起来，同时创建一个新的分支issue-no.，在该分支上修改bug，之后合并项目

git stash		//在项目的分支上用此命令可以将项目压进仓库，同时在工作区的列表里将不存在该项目

git stash pop		//在项目的分支上用该命令可以将项目待会工作区
git stash list 		//可以列出暂时存放在仓库的项目列表

另外
git merge --no--ff -m "修改bug的备注" branchname






Feature 分支
背景：软件开发添加新功能时为了不因为局部代码而打乱了整体代码，通常每添加一个新功能的时候最好新建一个feature分支，在上面开发，完成后合并，最终产出该feature分支

git checkout -b feature-functionname		//创建feature分支，后面的是需求功能的名称或者feature代号
git add filename		//功能代码源文件
git status			//查看当前分支和版本库的状态
git commit -m "description function" //提交描述
git checkout dev		//切换为dev分支
git merge feature-functionname  //合并
若没有合并，而且需求是将上述功能删除，这时需要
git branch -D feature-functionname		//强制删除功能分支

接下来的步骤就是将dev分支合并到master分支，然后删除dev分支
注意上面删除分支有别于删除提交之后的分支，提交时候删除是
git branch -d feature-name
而上面是-D参数






多人协作
背景：多人开发时，从软件仓库克隆出来的本地仓库只有master分支，用于开发的dev分支是不会被克隆出来。当你提交了dev分支时，若有其他人同时提交了dev分支，那么对方就需要将dev分支pull出来，同时合并，若无法合并就需要手动修改。具体描述代码如下
当你从远程仓库克隆时，实际上git自动把本地的master分支和远程的master对应了起来，并且远程仓库的默认名称是origin
查看远程仓库的信息：git remote
查看详细信息：	    git remote -v
推送分支：	    git push origin master
推送其他分支：	    git push origin branchname
各种分支推送标准
	1.master	主分支		时刻同步
	2.dev		开发分支	也需要同步
	3.bug		本地修复bug	不必同步
	4.feature	添加功能	取决于小伙伴是否在上面开发

分支抓取
多人协作时，大家都会网master和dev上推送各自的修改
第一个小伙伴：
git clone git@github.com:homesangsang/learngit.git
//默认情况下小伙伴只能看到本地master	git branch master
//小伙伴要在dev上开发，就必须创建远程origin的dev到本地，
git checkout -b dev origin/dev		//注意和本地创建分支的不同
git commit -m "description"
第二个小伙伴
git add filename
git commit -m "description"
git push origin dev	//此时提示failed to push some tefs to ....
//解决办法：git pull 把最新的提交从origin/dev 抓取，然后合并到本地，解决冲突，在推送
git pull	//提示失败，必须创建dev和origin/dev的链接
git branch --set-upstream dev origin/dev
git pull
//在手动修改冲突然后提交

通过上述描述，可以总结出多人协作开发的工作过程
	1.首先，可以试图git push origin branch-name
	2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并
	3.如果合并有冲突，则先解决冲突，并在本地提交，
	4.吐过没有冲或者解决掉冲突，在用git push origin branch-name
	5.如果git pull提示no tracking information 则说明本地分支和远程分支的链接关系没有创建，用命令 git branch --set-upstream branch-name origin/branch-name

